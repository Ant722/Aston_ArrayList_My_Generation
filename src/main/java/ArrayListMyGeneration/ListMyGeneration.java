package ArrayListMyGeneration;


/**
 * Упорядоченная коллекция (также известная как последовательность). Пользователь этого интерфейса имеет точный контроль над тем, куда в списке вставляется каждый элемент. Пользователь может получать доступ к элементам по их целочисленному индексу (позиции в списке) и выполнять поиск элементов в списке.
 * В отличие от наборов, списки обычно допускают дублирование элементов. Более формально, списки обычно допускают пары элементов e1 и e2 таким образом, что e1.равно (e2), и они обычно допускают несколько нулевых элементов, если они вообще допускают нулевые элементы. Не исключено, что кто-то может захотеть реализовать список, запрещающий дублирование, путем создания исключений во время выполнения, когда пользователь пытается их вставить, но мы ожидаем, что такое использование будет редким.
 * Интерфейс ListMyGeneration накладывает условия на контракты методов add, remove.
 * Интерфейс ListMyGeneration предоставляет методы для позиционного (индексированного) доступа к элементам списка. Списки (как и массивы Java) основаны на нуле.
 * Интерфейс ListMyGeneration предоставляет два метода поиска указанного объекта. С точки зрения производительности эти методы следует использовать с осторожностью. Они будут выполнять дорогостоящий линейный поиск.
 * Примечание: Хотя для списков допустимо содержать самих себя в качестве элементов, рекомендуется соблюдать крайнюю осторожность: методы equals и hashCode больше не определены четко в таком списке.
 * Некоторые реализации списков имеют ограничения на элементы, которые они могут содержать. Например, некоторые реализации запрещают нулевые элементы, а некоторые имеют ограничения на типы их элементов. Попытка добавить недопустимый элемент вызывает непроверенное исключение, обычно NullPointerException или ClassCastException. Попытка запросить наличие недопустимого элемента может вызвать исключение или просто вернуть значение false; некоторые реализации будут демонстрировать первое поведение, а некоторые - второе. В более общем плане, попытка выполнить операцию с недопустимым элементом, завершение которой не привело бы к вставке недопустимого элемента в список, может вызвать исключение или может завершиться успешно.
 * Этот интерфейс не является членом Java Collections Framework.
 * Автор:
 * Малыхин Антон.
 * Параметры типа:
 * <T> – тип элементов в этом списке
 */
public interface ListMyGeneration<T extends Object>  {
    /**
     * Возвращает количество элементов в этом списке. Если этот список содержит количество целочисленного значение больше нуля.
     * Возвращается:
     * количество элементов в этом списке
     */
    int size();

    /**
     * Возвращает значение true, если этот список не содержит элементов.
     */
    boolean isEmpty();

    /**
     * @param o
     * Добавляет указанный элемент в конец этого списка.
     * Списки, поддерживающие эту операцию, могут накладывать ограничения на то, какие элементы могут быть добавлены в этот список. В частности, некоторые списки будут отказываться добавлять нулевые элементы, а другие будут налагать ограничения на тип элементов, которые могут быть добавлены. Классы списков должны четко указывать в своей документации любые ограничения на то, какие элементы могут быть добавлены.
     * Параметры:
     * электронный элемент, который будет добавлен к этому списку
     * Возвращается:
     * true
     * Бросает:
     * UnsupportedOperationException – если операция добавления не поддерживается этим списком
     * ClassCastException – если класс указанного элемента препятствует его добавлению в этот список
     * Исключение NullPointerException – если указанный элемент равен null и этот список не допускает нулевых элементов
     * Исключение IllegalArgumentException – если какое-либо свойство этого элемента препятствует его добавлению в этот список
     */
    boolean add(Object o);

    /**
     * @param index
     * Вставляет указанный элемент в указанную позицию в этом списке (необязательная операция). Сдвигает элемент, находящийся в данный момент в этой позиции (если таковой имеется), и все последующие элементы вправо (добавляет единицу к их индексам).
     * Параметры:
     * index – индекс, по которому должен быть вставлен указанный элемент element – вставляемый элемент
     * Бросает:
     * UnsupportedOperationException – если операция добавления не поддерживается этим списком
     * ClassCastException – если класс указанного элемента препятствует его добавлению в этот список
     * Исключение NullPointerException – если указанный элемент равен null и этот список не допускает нулевых элементов
     * Исключение IllegalArgumentException – если какое-либо свойство указанного элемента препятствует его добавлению в этот список
     * IndexOutOfBoundsException – если индекс находится вне диапазона (index < 0 || index > size())
     */
    void add(int index, Object element);

    /**
     * @param o
     * Удаляет первое вхождение указанного элемента из этого списка, если оно присутствует (необязательная операция). Если этот список не содержит элемента, он остается неизменным. Более формально, удаляет элемент с наименьшим индексом i таким образом, что Objects.equals(o, get(i)) (если такой элемент существует). Возвращает значение true, если этот список содержал указанный элемент (или, что эквивалентно, если этот список изменился в результате вызова).
     * Параметры:
     * o – элемент, подлежащий удалению из этого списка, если он присутствует
     * Возвращается:
     * истинно, если этот список содержал указанный элемент
     * Бросает:
     * ClassCastException – если тип указанного элемента несовместим с этим списком (необязательно)
     * Исключение NullPointerException – если указанный элемент равен null и этот список не допускает элементы null (необязательно)
     */
    boolean remove(Object o);


    /**
     * Удаляет все элементы из этого списка (необязательная операция). Список будет пуст после возврата этого вызова.
     * Бросает:
     * UnsupportedOperationException – если операция очистки не поддерживается этим списком
     */
    void clear();

    /**
     * @param index
     * Возвращает элемент в указанной позиции в этом списке.
     * Параметры:
     * index – индекс возвращаемого элемента
     * Возвращается:
     * элемент в указанной позиции в этом списке
     * Бросает:
     * Исключение IndexOutOfBoundsException – если индекс находится вне диапазона (index < 0 || index >= size())
     */
    Object get(int index);

    /**
     * @param index
     * Заменяет элемент в указанной позиции в этом списке указанным элементом (необязательная операция).
     * Параметры:
     * index – индекс элемента для замены element – элемент, который будет сохранен в указанной позиции
     * Возвращается:
     * элемент, ранее находившийся в указанном положении
     * Бросает:
     * UnsupportedOperationException – если заданная операция не поддерживается этим списком
     * ClassCastException – если класс указанного элемента препятствует его добавлению в этот список
     * Исключение NullPointerException – если указанный элемент равен null и этот список не допускает нулевых элементов
     * Исключение IllegalArgumentException – если какое-либо свойство указанного элемента препятствует его добавлению в этот список
     * Исключение IndexOutOfBoundsException – если индекс находится вне диапазона (index < 0 || index >= size())
     */
    Object set(int index, Object element);

    /**
     * @param index
     * Удаляет элемент в указанной позиции в этом списке (необязательная операция). Сдвигает все последующие элементы влево (вычитает единицу из их индексов). Возвращает элемент, который был удален из списка.
     * Параметры:
     * индекс – индекс удаляемого элемента
     * Возвращается:
     * элемент, ранее находившийся в указанном положении
     * Бросает:
     * UnsupportedOperationException – если операция удаления не поддерживается этим списком
     * Исключение IndexOutOfBoundsException – если индекс находится вне диапазона (index < 0 || index >= size())
     */
    Object remove(int index);

    /**
     * @param o
     * Возвращает значение true, если этот список содержит указанный элемент. Более формально возвращает значение true тогда и только тогда, когда этот список содержит хотя бы один элемент e, такой, что Objects.equals(o, e).
     * Параметры:
     * o – элемент, присутствие которого в этом списке подлежит проверке
     * Возвращается:
     * истинно, если этот список содержит указанный элемент
     * Бросает:
     * ClassCastException – если тип указанного элемента несовместим с этим списком (необязательно)
     */
    boolean contains(Object o);

    /**
     * Сортирует этот список в соответствии с переопределением этого метода в классе. Сортировка стабильна: этот метод не должен изменять порядок равных элементов.
     * Этот список должен быть изменяемым, но не обязательно иметь возможность изменения размера.
     */
    void sort();


}
